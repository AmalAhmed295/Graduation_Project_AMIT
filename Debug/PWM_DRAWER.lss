
PWM_DRAWER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000206a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  0000206a  000020fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000ac  008000ac  0000214a  2**0
                  ALLOC
  3 .stab         00002004  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e59  00000000  00000000  00004150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000072dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000083de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009360  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000097a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <main>
      8a:	0c 94 33 10 	jmp	0x2066	; 0x2066 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ea       	ldi	r26, 0xA3	; 163
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ea       	ldi	r24, 0xA3	; 163
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ea       	ldi	r22, 0xA3	; 163
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void(*ADC_pvNotificationFunc)(void) = NULL;

static u8 ADC_U8BusyFlag = IDLE;


void ADC_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Set AREF as ref Volt*/
	CLR_BIT(ADMUX,ADMUX_REFS1);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24


#if ADC_U8_RESOLUTION == EIGHT_BIT
	SET_BIT(ADMUX,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 62       	ori	r24, 0x20	; 32
     cce:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error "Wrong ADC_U8_RESOLUTION option"
#endif
	/*Activate left adjust result for 8 bit resolution*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     cd0:	a7 e2       	ldi	r26, 0x27	; 39
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e2       	ldi	r30, 0x27	; 39
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	8c 93       	st	X, r24

	/* setting prescaler */
	ADCSRA &= 0b1111000;
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 77       	andi	r24, 0x78	; 120
     cea:	8c 93       	st	X, r24
	ADCSRA |= ADC_U8_PRESCALER;
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	87 60       	ori	r24, 0x07	; 7
     cf8:	8c 93       	st	X, r24

	/*ADC enable*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_U8StartConversionSynch>:

u8 ADC_U8StartConversionSynch(u8 Copy_U8Channel, u16* Copy_pu16Result){
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	28 97       	sbiw	r28, 0x08	; 8
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	8e 83       	std	Y+6, r24	; 0x06
     d24:	78 87       	std	Y+8, r23	; 0x08
     d26:	6f 83       	std	Y+7, r22	; 0x07

	u8 Local_U8ErrorState = OK;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32Counter=0;
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	1a 82       	std	Y+2, r1	; 0x02
     d30:	1b 82       	std	Y+3, r1	; 0x03
     d32:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16Result != NULL){
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	09 f4       	brne	.+2      	; 0xd3e <ADC_U8StartConversionSynch+0x30>
     d3c:	61 c0       	rjmp	.+194    	; 0xe00 <ADC_U8StartConversionSynch+0xf2>
		/* check ADC is idle */
		if (ADC_U8BusyFlag == IDLE)
     d3e:	80 91 b0 00 	lds	r24, 0x00B0
     d42:	88 23       	and	r24, r24
     d44:	09 f0       	breq	.+2      	; 0xd48 <ADC_U8StartConversionSynch+0x3a>
     d46:	59 c0       	rjmp	.+178    	; 0xdfa <ADC_U8StartConversionSynch+0xec>
		{
			/* ADC is now busy*/
			ADC_U8BusyFlag == BUSY;

			/* set channel */
			ADMUX &= 0b11100000;
     d48:	a7 e2       	ldi	r26, 0x27	; 39
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e7 e2       	ldi	r30, 0x27	; 39
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 7e       	andi	r24, 0xE0	; 224
     d54:	8c 93       	st	X, r24
			ADMUX |= Copy_U8Channel;
     d56:	a7 e2       	ldi	r26, 0x27	; 39
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e2       	ldi	r30, 0x27	; 39
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	90 81       	ld	r25, Z
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	89 2b       	or	r24, r25
     d64:	8c 93       	st	X, r24

			/* start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d66:	a6 e2       	ldi	r26, 0x26	; 38
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e6 e2       	ldi	r30, 0x26	; 38
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	8c 93       	st	X, r24
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <ADC_U8StartConversionSynch+0x7e>

			/* busy waiting on (polling) on the conversion complete flag as long as timeout has not passed*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_U32Counter != ADC_U32_TIMEOUT)){

				Local_U32Counter++;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	ab 81       	ldd	r26, Y+3	; 0x03
     d7c:	bc 81       	ldd	r27, Y+4	; 0x04
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	a1 1d       	adc	r26, r1
     d82:	b1 1d       	adc	r27, r1
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	ab 83       	std	Y+3, r26	; 0x03
     d8a:	bc 83       	std	Y+4, r27	; 0x04

			/* start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);

			/* busy waiting on (polling) on the conversion complete flag as long as timeout has not passed*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_U32Counter != ADC_U32_TIMEOUT)){
     d8c:	e6 e2       	ldi	r30, 0x26	; 38
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	82 95       	swap	r24
     d94:	8f 70       	andi	r24, 0x0F	; 15
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	81 70       	andi	r24, 0x01	; 1
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	61 f4       	brne	.+24     	; 0xdba <ADC_U8StartConversionSynch+0xac>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	ab 81       	ldd	r26, Y+3	; 0x03
     da8:	bc 81       	ldd	r27, Y+4	; 0x04
     daa:	80 35       	cpi	r24, 0x50	; 80
     dac:	23 ec       	ldi	r18, 0xC3	; 195
     dae:	92 07       	cpc	r25, r18
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	a2 07       	cpc	r26, r18
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	b2 07       	cpc	r27, r18
     db8:	f1 f6       	brne	.-68     	; 0xd76 <ADC_U8StartConversionSynch+0x68>
				Local_U32Counter++;

			}

			/* check about the reason why the loop has finished */
			if(Local_U32Counter == ADC_U32_TIMEOUT){
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	ab 81       	ldd	r26, Y+3	; 0x03
     dc0:	bc 81       	ldd	r27, Y+4	; 0x04
     dc2:	80 35       	cpi	r24, 0x50	; 80
     dc4:	23 ec       	ldi	r18, 0xC3	; 195
     dc6:	92 07       	cpc	r25, r18
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	a2 07       	cpc	r26, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	b2 07       	cpc	r27, r18
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <ADC_U8StartConversionSynch+0xca>
				Local_U8ErrorState = TIMEOUT_Err ;
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <ADC_U8StartConversionSynch+0xf6>
			}
			else
			{
				/* the loop is finished because conversion complete flag is raised */
				/* clear the flag */
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     dd8:	a6 e2       	ldi	r26, 0x26	; 38
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e6 e2       	ldi	r30, 0x26	; 38
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	8c 93       	st	X, r24

				/* return the data */
#if ADC_U8_RESOLUTION == EIGHT_BIT
				*Copy_pu16Result = ADCH;
     de6:	e5 e2       	ldi	r30, 0x25	; 37
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	ef 81       	ldd	r30, Y+7	; 0x07
     df2:	f8 85       	ldd	r31, Y+8	; 0x08
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <ADC_U8StartConversionSynch+0xf6>
			/* ADC is now IDLE */
			ADC_U8BusyFlag == IDLE;
		}
		else
		{
			Local_U8ErrorState = BUSY_Err;
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <ADC_U8StartConversionSynch+0xf6>
		}
	}
	else{
		Local_U8ErrorState = NULL_PONTER;
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_U8ErrorState;
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <ADC_U8StartConversionAsynch>:
u8 ADC_U8StartConversionAsynch(u8 Copy_U8Channel, u16* Copy_pu16Result,void(*Copy_pvNotificationFunc)(void)){
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <ADC_U8StartConversionAsynch+0x6>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <ADC_U8StartConversionAsynch+0x8>
     e20:	00 d0       	rcall	.+0      	; 0xe22 <ADC_U8StartConversionAsynch+0xa>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	8a 83       	std	Y+2, r24	; 0x02
     e28:	7c 83       	std	Y+4, r23	; 0x04
     e2a:	6b 83       	std	Y+3, r22	; 0x03
     e2c:	5e 83       	std	Y+6, r21	; 0x06
     e2e:	4d 83       	std	Y+5, r20	; 0x05

	u8 Local_U8ErrorState = OK;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	d1 f1       	breq	.+116    	; 0xeb0 <ADC_U8StartConversionAsynch+0x98>
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	b1 f1       	breq	.+108    	; 0xeb0 <ADC_U8StartConversionAsynch+0x98>
	{
		if (ADC_U8BusyFlag == IDLE)
     e44:	80 91 b0 00 	lds	r24, 0x00B0
     e48:	88 23       	and	r24, r24
     e4a:	79 f5       	brne	.+94     	; 0xeaa <ADC_U8StartConversionAsynch+0x92>
		{
			/* ADC is now BUSY */
			ADC_U8BusyFlag = BUSY;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 b0 00 	sts	0x00B0, r24

			/* initialize the ADC result pointer globally */
			ADC_pu16Result = *Copy_pu16Result;
     e52:	eb 81       	ldd	r30, Y+3	; 0x03
     e54:	fc 81       	ldd	r31, Y+4	; 0x04
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	90 93 ad 00 	sts	0x00AD, r25
     e5e:	80 93 ac 00 	sts	0x00AC, r24

			/*initialize the ADC notification function pointer globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	90 93 af 00 	sts	0x00AF, r25
     e6a:	80 93 ae 00 	sts	0x00AE, r24

			/* set channel */
			ADMUX &= 0b11100000;
     e6e:	a7 e2       	ldi	r26, 0x27	; 39
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e2       	ldi	r30, 0x27	; 39
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 7e       	andi	r24, 0xE0	; 224
     e7a:	8c 93       	st	X, r24
			ADMUX |= Copy_U8Channel;
     e7c:	a7 e2       	ldi	r26, 0x27	; 39
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	90 81       	ld	r25, Z
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	89 2b       	or	r24, r25
     e8a:	8c 93       	st	X, r24

			/* start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e8c:	a6 e2       	ldi	r26, 0x26	; 38
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 e2       	ldi	r30, 0x26	; 38
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 64       	ori	r24, 0x40	; 64
     e98:	8c 93       	st	X, r24

			/* ADC conversion complete interrupt enable */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e9a:	a6 e2       	ldi	r26, 0x26	; 38
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	8c 93       	st	X, r24
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <ADC_U8StartConversionAsynch+0x9c>
		}
		else
		{
			Local_U8ErrorState = BUSY_Err;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <ADC_U8StartConversionAsynch+0x9c>
		}
	}
	else
	{

		Local_U8ErrorState = NULL_PONTER;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	89 83       	std	Y+1, r24	; 0x01

	}



	return Local_U8ErrorState;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb6:	26 96       	adiw	r28, 0x06	; 6
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <__vector_16>:

/* ADC ASR*/
void __vector_16 (void)            __attribute__((signal));
void __vector_16 (void)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
#if ADC_U8_RESOLUTION == EIGHT_BIT
	ADC_pu16Result = ADCH;
     ef2:	e5 e2       	ldi	r30, 0x25	; 37
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 ad 00 	sts	0x00AD, r25
     f00:	80 93 ac 00 	sts	0x00AC, r24
#elif ADC_U8_RESOLUTION == TEN_BIT
	*ADC_pu16Result = ADC;
#endif

	/* ADC conversion complete interrupt disable */
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f04:	a6 e2       	ldi	r26, 0x26	; 38
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	8c 93       	st	X, r24

	/* ADC is now IDLE */
	ADC_U8BusyFlag = IDLE;
     f12:	10 92 b0 00 	sts	0x00B0, r1

	/* invoke the call back notification function */
	if (ADC_pvNotificationFunc != NULL)
     f16:	80 91 ae 00 	lds	r24, 0x00AE
     f1a:	90 91 af 00 	lds	r25, 0x00AF
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	29 f0       	breq	.+10     	; 0xf2c <__vector_16+0x64>
	{
		ADC_pvNotificationFunc();
     f22:	e0 91 ae 00 	lds	r30, 0x00AE
     f26:	f0 91 af 00 	lds	r31, 0x00AF
     f2a:	09 95       	icall
	}
	else{
		/* do nothing */
	}

}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <DIO_U8SetPinValue>:

	return Local_U8_ErrorState;
}

*/
u8 DIO_U8SetPinValue(u8 Copy_U8Port,u8 Copy_U8PinNumber,u8 Copy_U8Value){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	28 97       	sbiw	r28, 0x08	; 8
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	6b 83       	std	Y+3, r22	; 0x03
     f6a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8_ErrorState=OK;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_U8PinNumber<=DIO_U8_PIN7){
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 30       	cpi	r24, 0x08	; 8
     f74:	08 f0       	brcs	.+2      	; 0xf78 <DIO_U8SetPinValue+0x26>
     f76:	f6 c0       	rjmp	.+492    	; 0x1164 <DIO_U8SetPinValue+0x212>

	   if(Copy_U8Value==DIO_U8_PIN_LOW){
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	88 23       	and	r24, r24
     f7c:	09 f0       	breq	.+2      	; 0xf80 <DIO_U8SetPinValue+0x2e>
     f7e:	78 c0       	rjmp	.+240    	; 0x1070 <DIO_U8SetPinValue+0x11e>

		   switch(Copy_U8Port){
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	38 87       	std	Y+8, r19	; 0x08
     f88:	2f 83       	std	Y+7, r18	; 0x07
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	98 85       	ldd	r25, Y+8	; 0x08
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	91 05       	cpc	r25, r1
     f92:	61 f1       	breq	.+88     	; 0xfec <DIO_U8SetPinValue+0x9a>
     f94:	2f 81       	ldd	r18, Y+7	; 0x07
     f96:	38 85       	ldd	r19, Y+8	; 0x08
     f98:	23 30       	cpi	r18, 0x03	; 3
     f9a:	31 05       	cpc	r19, r1
     f9c:	34 f4       	brge	.+12     	; 0xfaa <DIO_U8SetPinValue+0x58>
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	69 f0       	breq	.+26     	; 0xfc2 <DIO_U8SetPinValue+0x70>
     fa8:	60 c0       	rjmp	.+192    	; 0x106a <DIO_U8SetPinValue+0x118>
     faa:	2f 81       	ldd	r18, Y+7	; 0x07
     fac:	38 85       	ldd	r19, Y+8	; 0x08
     fae:	23 30       	cpi	r18, 0x03	; 3
     fb0:	31 05       	cpc	r19, r1
     fb2:	89 f1       	breq	.+98     	; 0x1016 <DIO_U8SetPinValue+0xc4>
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	98 85       	ldd	r25, Y+8	; 0x08
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <DIO_U8SetPinValue+0x6e>
     fbe:	40 c0       	rjmp	.+128    	; 0x1040 <DIO_U8SetPinValue+0xee>
     fc0:	54 c0       	rjmp	.+168    	; 0x106a <DIO_U8SetPinValue+0x118>
		   case DIO_U8_PORTA:  CLR_BIT(PORTA,Copy_U8PinNumber);  break;
     fc2:	ab e3       	ldi	r26, 0x3B	; 59
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_U8SetPinValue+0x8e>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_U8SetPinValue+0x8a>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	be c0       	rjmp	.+380    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   case DIO_U8_PORTB:  CLR_BIT(PORTB,Copy_U8PinNumber);  break;
     fec:	a8 e3       	ldi	r26, 0x38	; 56
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e8 e3       	ldi	r30, 0x38	; 56
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_U8SetPinValue+0xb8>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_U8SetPinValue+0xb4>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	a9 c0       	rjmp	.+338    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   case DIO_U8_PORTC:  CLR_BIT(PORTC,Copy_U8PinNumber);  break;
    1016:	a5 e3       	ldi	r26, 0x35	; 53
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e3       	ldi	r30, 0x35	; 53
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_U8SetPinValue+0xe2>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_U8SetPinValue+0xde>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	94 c0       	rjmp	.+296    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   case DIO_U8_PORTD:  CLR_BIT(PORTD,Copy_U8PinNumber);  break;
    1040:	a2 e3       	ldi	r26, 0x32	; 50
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e2 e3       	ldi	r30, 0x32	; 50
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_U8SetPinValue+0x10c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_U8SetPinValue+0x108>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	7f c0       	rjmp	.+254    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   default:Local_U8_ErrorState=NOK;                     break;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	7c c0       	rjmp	.+248    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   }
	   }
	   else if(Copy_U8Value==DIO_U8_PIN_HIGH){
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	09 f0       	breq	.+2      	; 0x1078 <DIO_U8SetPinValue+0x126>
    1076:	73 c0       	rjmp	.+230    	; 0x115e <DIO_U8SetPinValue+0x20c>

		   switch(Copy_U8Port){
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3e 83       	std	Y+6, r19	; 0x06
    1080:	2d 83       	std	Y+5, r18	; 0x05
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	51 f1       	breq	.+84     	; 0x10e0 <DIO_U8SetPinValue+0x18e>
    108c:	2d 81       	ldd	r18, Y+5	; 0x05
    108e:	3e 81       	ldd	r19, Y+6	; 0x06
    1090:	23 30       	cpi	r18, 0x03	; 3
    1092:	31 05       	cpc	r19, r1
    1094:	34 f4       	brge	.+12     	; 0x10a2 <DIO_U8SetPinValue+0x150>
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	61 f0       	breq	.+24     	; 0x10b8 <DIO_U8SetPinValue+0x166>
    10a0:	5b c0       	rjmp	.+182    	; 0x1158 <DIO_U8SetPinValue+0x206>
    10a2:	2d 81       	ldd	r18, Y+5	; 0x05
    10a4:	3e 81       	ldd	r19, Y+6	; 0x06
    10a6:	23 30       	cpi	r18, 0x03	; 3
    10a8:	31 05       	cpc	r19, r1
    10aa:	71 f1       	breq	.+92     	; 0x1108 <DIO_U8SetPinValue+0x1b6>
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	91 05       	cpc	r25, r1
    10b4:	e9 f1       	breq	.+122    	; 0x1130 <DIO_U8SetPinValue+0x1de>
    10b6:	50 c0       	rjmp	.+160    	; 0x1158 <DIO_U8SetPinValue+0x206>
		   	   case DIO_U8_PORTA: SET_BIT(PORTA,Copy_U8PinNumber);   break;
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_U8SetPinValue+0x184>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_U8SetPinValue+0x180>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	44 c0       	rjmp	.+136    	; 0x1168 <DIO_U8SetPinValue+0x216>
		   	   case DIO_U8_PORTB: SET_BIT(PORTB,Copy_U8PinNumber);   break;
    10e0:	a8 e3       	ldi	r26, 0x38	; 56
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e8 e3       	ldi	r30, 0x38	; 56
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_U8SetPinValue+0x1ac>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_U8SetPinValue+0x1a8>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	30 c0       	rjmp	.+96     	; 0x1168 <DIO_U8SetPinValue+0x216>
		   	   case DIO_U8_PORTC: SET_BIT(PORTC,Copy_U8PinNumber);   break;
    1108:	a5 e3       	ldi	r26, 0x35	; 53
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_U8SetPinValue+0x1d4>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_U8SetPinValue+0x1d0>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	1c c0       	rjmp	.+56     	; 0x1168 <DIO_U8SetPinValue+0x216>
		   	   case DIO_U8_PORTD: SET_BIT(PORTD,Copy_U8PinNumber);   break;
    1130:	a2 e3       	ldi	r26, 0x32	; 50
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e2 e3       	ldi	r30, 0x32	; 50
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_U8SetPinValue+0x1fc>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_U8SetPinValue+0x1f8>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <DIO_U8SetPinValue+0x216>
		   	   default:Local_U8_ErrorState=NOK;                      break;
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <DIO_U8SetPinValue+0x216>
	   }


	   else{

		   Local_U8_ErrorState=NOK;  // Error Value//
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_U8SetPinValue+0x216>
	       }

		}
	   else{

			Local_U8_ErrorState=NOK;   //Error Pin Number//
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	89 83       	std	Y+1, r24	; 0x01

		}

		return Local_U8_ErrorState;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	28 96       	adiw	r28, 0x08	; 8
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_U8Port,u8 Copy_U8Value){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_U8SetPortValue+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_U8SetPortValue+0x8>
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	6b 83       	std	Y+3, r22	; 0x03
	
	u8 Local_U8_ErrorState=OK;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_U8Port){
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3d 83       	std	Y+5, r19	; 0x05
    119a:	2c 83       	std	Y+4, r18	; 0x04
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	91 05       	cpc	r25, r1
    11a4:	d9 f0       	breq	.+54     	; 0x11dc <DIO_U8SetPortValue+0x60>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	23 30       	cpi	r18, 0x03	; 3
    11ac:	31 05       	cpc	r19, r1
    11ae:	34 f4       	brge	.+12     	; 0x11bc <DIO_U8SetPortValue+0x40>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <DIO_U8SetPortValue+0x56>
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <DIO_U8SetPortValue+0x7e>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	23 30       	cpi	r18, 0x03	; 3
    11c2:	31 05       	cpc	r19, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <DIO_U8SetPortValue+0x6a>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	91 05       	cpc	r25, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <DIO_U8SetPortValue+0x74>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <DIO_U8SetPortValue+0x7e>

		case DIO_U8_PORTA : PORTA = Copy_U8Value;      break;
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	80 83       	st	Z, r24
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <DIO_U8SetPortValue+0x82>
		case DIO_U8_PORTB : PORTB = Copy_U8Value;      break;
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	80 83       	st	Z, r24
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <DIO_U8SetPortValue+0x82>
		case DIO_U8_PORTC : PORTC = Copy_U8Value;      break;
    11e6:	e5 e3       	ldi	r30, 0x35	; 53
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	80 83       	st	Z, r24
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <DIO_U8SetPortValue+0x82>
		case DIO_U8_PORTD : PORTD = Copy_U8Value;      break;
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	80 83       	st	Z, r24
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_U8SetPortValue+0x82>
		default: Local_U8_ErrorState=NOK;           break;
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_U8_ErrorState;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8PinNumber,u8* Copy_PU8Value){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	27 97       	sbiw	r28, 0x07	; 7
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	6b 83       	std	Y+3, r22	; 0x03
    1228:	5d 83       	std	Y+5, r21	; 0x05
    122a:	4c 83       	std	Y+4, r20	; 0x04
  u8 Local_U8_ErrorState=OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01

  if(Copy_U8PinNumber<=DIO_U8_PIN7){
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <DIO_U8GetPinValue+0x28>
    1236:	63 c0       	rjmp	.+198    	; 0x12fe <DIO_U8GetPinValue+0xee>

  	   switch(Copy_U8Port){
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3f 83       	std	Y+7, r19	; 0x07
    1240:	2e 83       	std	Y+6, r18	; 0x06
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	91 05       	cpc	r25, r1
    124a:	31 f1       	breq	.+76     	; 0x1298 <DIO_U8GetPinValue+0x88>
    124c:	2e 81       	ldd	r18, Y+6	; 0x06
    124e:	3f 81       	ldd	r19, Y+7	; 0x07
    1250:	23 30       	cpi	r18, 0x03	; 3
    1252:	31 05       	cpc	r19, r1
    1254:	34 f4       	brge	.+12     	; 0x1262 <DIO_U8GetPinValue+0x52>
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	9f 81       	ldd	r25, Y+7	; 0x07
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	61 f0       	breq	.+24     	; 0x1278 <DIO_U8GetPinValue+0x68>
    1260:	4b c0       	rjmp	.+150    	; 0x12f8 <DIO_U8GetPinValue+0xe8>
    1262:	2e 81       	ldd	r18, Y+6	; 0x06
    1264:	3f 81       	ldd	r19, Y+7	; 0x07
    1266:	23 30       	cpi	r18, 0x03	; 3
    1268:	31 05       	cpc	r19, r1
    126a:	31 f1       	breq	.+76     	; 0x12b8 <DIO_U8GetPinValue+0xa8>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	9f 81       	ldd	r25, Y+7	; 0x07
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	91 05       	cpc	r25, r1
    1274:	89 f1       	breq	.+98     	; 0x12d8 <DIO_U8GetPinValue+0xc8>
    1276:	40 c0       	rjmp	.+128    	; 0x12f8 <DIO_U8GetPinValue+0xe8>
  	   case DIO_U8_PORTA: *Copy_PU8Value=GET_BIT(DIO_U8_PORTA,Copy_U8PinNumber);  break;
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_U8GetPinValue+0x7a>
    1286:	95 95       	asr	r25
    1288:	87 95       	ror	r24
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_U8GetPinValue+0x76>
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	ec 81       	ldd	r30, Y+4	; 0x04
    1292:	fd 81       	ldd	r31, Y+5	; 0x05
    1294:	80 83       	st	Z, r24
    1296:	35 c0       	rjmp	.+106    	; 0x1302 <DIO_U8GetPinValue+0xf2>
  	   case DIO_U8_PORTB: *Copy_PU8Value=GET_BIT(DIO_U8_PORTB,Copy_U8PinNumber);  break;
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_U8GetPinValue+0x9a>
    12a6:	95 95       	asr	r25
    12a8:	87 95       	ror	r24
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_U8GetPinValue+0x96>
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	ec 81       	ldd	r30, Y+4	; 0x04
    12b2:	fd 81       	ldd	r31, Y+5	; 0x05
    12b4:	80 83       	st	Z, r24
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <DIO_U8GetPinValue+0xf2>
  	   case DIO_U8_PORTC: *Copy_PU8Value=GET_BIT(DIO_U8_PORTC,Copy_U8PinNumber);  break;
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_U8GetPinValue+0xba>
    12c6:	95 95       	asr	r25
    12c8:	87 95       	ror	r24
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_U8GetPinValue+0xb6>
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	ec 81       	ldd	r30, Y+4	; 0x04
    12d2:	fd 81       	ldd	r31, Y+5	; 0x05
    12d4:	80 83       	st	Z, r24
    12d6:	15 c0       	rjmp	.+42     	; 0x1302 <DIO_U8GetPinValue+0xf2>
  	   case DIO_U8_PORTD: *Copy_PU8Value=GET_BIT(DIO_U8_PORTD,Copy_U8PinNumber);  break;
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_U8GetPinValue+0xda>
    12e6:	95 95       	asr	r25
    12e8:	87 95       	ror	r24
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_U8GetPinValue+0xd6>
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	ec 81       	ldd	r30, Y+4	; 0x04
    12f2:	fd 81       	ldd	r31, Y+5	; 0x05
    12f4:	80 83       	st	Z, r24
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <DIO_U8GetPinValue+0xf2>
  	   default:Local_U8_ErrorState=NOK;                    break;
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_U8GetPinValue+0xf2>
  	   }
  }
  	   else{

  		 Local_U8_ErrorState=NOK;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	89 83       	std	Y+1, r24	; 0x01
  	   }

  return Local_U8_ErrorState;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
}
    1304:	27 96       	adiw	r28, 0x07	; 7
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <GIE_voidEnableGlobal>:
#include"BIT_MATH.h"

#include"GIE_interface.h"
#include"GIE_reg.h"

void GIE_voidEnableGlobal(void){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	// SET_BIT(SREG,SREG_I);
	 __asm volatile("SEI");       /* Inline assembly syntax in GCC toolchain*/
    131e:	78 94       	sei
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal(void){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	// CLR_BIT(SREG,SREG_I);
	__asm volatile ("CLI");       /* Inline assembly syntax in GCC toolchain*/
    132e:	f8 94       	cli
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <SendEnablePulse>:

#include"GLCD_interface.h"
#include"GLCD_private.h"
#include"GLCD_config.h"

static void SendEnablePulse(void){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	2e 97       	sbiw	r28, 0x0e	; 14
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_E_PIN,DIO_U8_PIN_HIGH);
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	62 e0       	ldi	r22, 0x02	; 2
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e0       	ldi	r26, 0x00	; 0
    135a:	b0 e4       	ldi	r27, 0x40	; 64
    135c:	8b 87       	std	Y+11, r24	; 0x0b
    135e:	9c 87       	std	Y+12, r25	; 0x0c
    1360:	ad 87       	std	Y+13, r26	; 0x0d
    1362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	6b 85       	ldd	r22, Y+11	; 0x0b
    1366:	7c 85       	ldd	r23, Y+12	; 0x0c
    1368:	8d 85       	ldd	r24, Y+13	; 0x0d
    136a:	9e 85       	ldd	r25, Y+14	; 0x0e
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a e7       	ldi	r20, 0x7A	; 122
    1372:	55 e4       	ldi	r21, 0x45	; 69
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8f 83       	std	Y+7, r24	; 0x07
    137e:	98 87       	std	Y+8, r25	; 0x08
    1380:	a9 87       	std	Y+9, r26	; 0x09
    1382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <SendEnablePulse+0x70>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	4c f5       	brge	.+82     	; 0x1410 <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13be:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <SendEnablePulse+0xd0>
    13e8:	80 e9       	ldi	r24, 0x90	; 144
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <SendEnablePulse+0xbe>
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f7       	brne	.-38     	; 0x13e8 <SendEnablePulse+0xb2>
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <SendEnablePulse+0xfa>
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_E_PIN,DIO_U8_PIN_LOW);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
}
    1442:	2e 96       	adiw	r28, 0x0e	; 14
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <GLCD_voidInit>:


void GLCD_voidInit(void){
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62

	/* display on off instruction */
	GLCD_VoidSendCommand(0b00111111);
    145c:	8f e3       	ldi	r24, 0x3F	; 63
    145e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>

	/* to activate display on both halves */
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_HIGH);
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	63 e0       	ldi	r22, 0x03	; 3
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	64 e0       	ldi	r22, 0x04	; 4
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/* to select the instruction mode */
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RS_PIN,DIO_U8_PIN_LOW);
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RW_PIN,DIO_U8_PIN_LOW);
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/* Enable */
	SendEnablePulse();
    148a:	0e 94 9b 09 	call	0x1336	; 0x1336 <SendEnablePulse>

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <GLCD_VoidSendCommand>:
void GLCD_VoidSendCommand(u8 Copy_U8Command){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01


	/********** send the command to the lcd on data port*********/
	DIO_U8SetPortValue(GLCD_U8_DATA_PORT,Copy_U8Command);
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	69 81       	ldd	r22, Y+1	; 0x01
    14a4:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_U8SetPortValue>

	/**** set RS pin to low for command******/
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RS_PIN,DIO_U8_PIN_LOW);
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/**** set RW pin to low to write******/
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RW_PIN,DIO_U8_PIN_LOW);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/*********send enable pulse***********************/
	SendEnablePulse();
    14bc:	0e 94 9b 09 	call	0x1336	; 0x1336 <SendEnablePulse>

}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <GLCD_VoidSendData>:
void GLCD_VoidSendData(u8 Copy_U8Data){
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01

	/********** send the data to the lcd on data port*********/
	DIO_U8SetPortValue(GLCD_U8_DATA_PORT,Copy_U8Data);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	69 81       	ldd	r22, Y+1	; 0x01
    14d8:	0e 94 be 08 	call	0x117c	; 0x117c <DIO_U8SetPortValue>

	/**** set RS pin to low for data******/
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RS_PIN,DIO_U8_PIN_HIGH);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/**** set RW pin to low to write******/
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RW_PIN,DIO_U8_PIN_LOW);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/*********send enable pulse***********************/
	SendEnablePulse();
    14f0:	0e 94 9b 09 	call	0x1336	; 0x1336 <SendEnablePulse>

}
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GLCD_U8SendString>:

u8 GLCD_U8SendString(const s8* Copy_pchString){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GLCD_U8SendString+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GLCD_U8SendString+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8ErrorState = OK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter=0;
    1510:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pchString != NULL){
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	d9 f0       	breq	.+54     	; 0x1550 <GLCD_U8SendString+0x54>
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <GLCD_U8SendString+0x3c>

		while(Copy_pchString[Local_U8Counter]!= '\0')
		{
			GLCD_VoidSendData(Copy_pchString[Local_U8Counter]);
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	fc 01       	movw	r30, r24
    1528:	e2 0f       	add	r30, r18
    152a:	f3 1f       	adc	r31, r19
    152c:	80 81       	ld	r24, Z
    152e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GLCD_VoidSendData>
			Local_U8Counter++;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_U8ErrorState = OK;
	u8 Local_U8Counter=0;

	if(Copy_pchString != NULL){

		while(Copy_pchString[Local_U8Counter]!= '\0')
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	fc 01       	movw	r30, r24
    1544:	e2 0f       	add	r30, r18
    1546:	f3 1f       	adc	r31, r19
    1548:	80 81       	ld	r24, Z
    154a:	88 23       	and	r24, r24
    154c:	39 f7       	brne	.-50     	; 0x151c <GLCD_U8SendString+0x20>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <GLCD_U8SendString+0x58>
			GLCD_VoidSendData(Copy_pchString[Local_U8Counter]);
			Local_U8Counter++;
		}
	}
	else{
		Local_U8ErrorState = NULL_PONTER;
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_U8ErrorState;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <GLCD_U8PageSelection>:

u8 GLCD_U8PageSelection(u8 Copy_U8Page){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <GLCD_U8PageSelection+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <GLCD_U8PageSelection+0x8>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8ErrorState= OK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01

	/* to activate display on both halves */
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_HIGH);
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	63 e0       	ldi	r22, 0x03	; 3
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	/* to select the instruction mode */
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RS_PIN,DIO_U8_PIN_LOW);
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RW_PIN,DIO_U8_PIN_LOW);
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	if(Copy_U8Page < 8){
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <GLCD_U8PageSelection+0x42>
    15a4:	58 c0       	rjmp	.+176    	; 0x1656 <GLCD_U8PageSelection+0xf2>
		/* set page */
		switch(Copy_U8Page)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	a9 f1       	breq	.+106    	; 0x1624 <GLCD_U8PageSelection+0xc0>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	24 30       	cpi	r18, 0x04	; 4
    15c0:	31 05       	cpc	r19, r1
    15c2:	7c f4       	brge	.+30     	; 0x15e2 <GLCD_U8PageSelection+0x7e>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	19 f1       	breq	.+70     	; 0x1614 <GLCD_U8PageSelection+0xb0>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	14 f5       	brge	.+68     	; 0x161c <GLCD_U8PageSelection+0xb8>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	b1 f0       	breq	.+44     	; 0x160c <GLCD_U8PageSelection+0xa8>
    15e0:	35 c0       	rjmp	.+106    	; 0x164c <GLCD_U8PageSelection+0xe8>
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	25 30       	cpi	r18, 0x05	; 5
    15e8:	31 05       	cpc	r19, r1
    15ea:	21 f1       	breq	.+72     	; 0x1634 <GLCD_U8PageSelection+0xd0>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	85 30       	cpi	r24, 0x05	; 5
    15f2:	91 05       	cpc	r25, r1
    15f4:	dc f0       	brlt	.+54     	; 0x162c <GLCD_U8PageSelection+0xc8>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	26 30       	cpi	r18, 0x06	; 6
    15fc:	31 05       	cpc	r19, r1
    15fe:	f1 f0       	breq	.+60     	; 0x163c <GLCD_U8PageSelection+0xd8>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	87 30       	cpi	r24, 0x07	; 7
    1606:	91 05       	cpc	r25, r1
    1608:	e9 f0       	breq	.+58     	; 0x1644 <GLCD_U8PageSelection+0xe0>
    160a:	20 c0       	rjmp	.+64     	; 0x164c <GLCD_U8PageSelection+0xe8>
		{
		case GLCD_U8_PAGE_0 : GLCD_VoidSendCommand(0b10111000); break;
    160c:	88 eb       	ldi	r24, 0xB8	; 184
    160e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    1612:	1e c0       	rjmp	.+60     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_1 : GLCD_VoidSendCommand(0b10111001); break;
    1614:	89 eb       	ldi	r24, 0xB9	; 185
    1616:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    161a:	1a c0       	rjmp	.+52     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_2 : GLCD_VoidSendCommand(0b10111010); break;
    161c:	8a eb       	ldi	r24, 0xBA	; 186
    161e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    1622:	16 c0       	rjmp	.+44     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_3 : GLCD_VoidSendCommand(0b10111011); break;
    1624:	8b eb       	ldi	r24, 0xBB	; 187
    1626:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    162a:	12 c0       	rjmp	.+36     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_4 : GLCD_VoidSendCommand(0b10111100); break;
    162c:	8c eb       	ldi	r24, 0xBC	; 188
    162e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    1632:	0e c0       	rjmp	.+28     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_5 : GLCD_VoidSendCommand(0b10111101); break;
    1634:	8d eb       	ldi	r24, 0xBD	; 189
    1636:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    163a:	0a c0       	rjmp	.+20     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_6 : GLCD_VoidSendCommand(0b10111110); break;
    163c:	8e eb       	ldi	r24, 0xBE	; 190
    163e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <GLCD_U8PageSelection+0xec>
		case GLCD_U8_PAGE_7 : GLCD_VoidSendCommand(0b10111111); break;
    1644:	8f eb       	ldi	r24, 0xBF	; 191
    1646:	0e 94 4a 0a 	call	0x1494	; 0x1494 <GLCD_VoidSendCommand>
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <GLCD_U8PageSelection+0xec>
		default: Local_U8ErrorState = NOK;                      break;
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	89 83       	std	Y+1, r24	; 0x01
		}

		SendEnablePulse();
    1650:	0e 94 9b 09 	call	0x1336	; 0x1336 <SendEnablePulse>
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GLCD_U8PageSelection+0xf6>
	}
	else
	{
		Local_U8ErrorState = NOK;
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_U8ErrorState;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <GLCD_U8ColumnSelection>:

u8 GLCD_U8ColumnSelection(u8 Copy_U8Column){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <GLCD_U8ColumnSelection+0x6>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8ErrorState= OK;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_U8Column < 128)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 23       	and	r24, r24
    167e:	fc f0       	brlt	.+62     	; 0x16be <GLCD_U8ColumnSelection+0x54>
	{
		if(Copy_U8Column < 64)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 34       	cpi	r24, 0x40	; 64
    1684:	58 f4       	brcc	.+22     	; 0x169c <GLCD_U8ColumnSelection+0x32>
		{
			DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_HIGH);
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_LOW);
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <GLCD_U8ColumnSelection+0x58>
		}
		else if(Copy_U8Column > 63)
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 34       	cpi	r24, 0x40	; 64
    16a0:	58 f0       	brcs	.+22     	; 0x16b8 <GLCD_U8ColumnSelection+0x4e>
		{
			DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_LOW);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	63 e0       	ldi	r22, 0x03	; 3
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
			DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <GLCD_U8ColumnSelection+0x58>
		}
		else
		{
			Local_U8ErrorState = NOK;
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GLCD_U8ColumnSelection+0x58>
		}
	}
	else
	{
		Local_U8ErrorState = NOK;
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	89 83       	std	Y+1, r24	; 0x01
	}
	/* to select the instruction mode */
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RS_PIN,DIO_U8_PIN_LOW);
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_RW_PIN,DIO_U8_PIN_LOW);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	SendEnablePulse();
    16d6:	0e 94 9b 09 	call	0x1336	; 0x1336 <SendEnablePulse>

	return Local_U8ErrorState;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GLCD_voidSendNumber>:
void GLCD_voidSendNumber(u32 Copy_U32Number)
{
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	28 97       	sbiw	r28, 0x08	; 8
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	6d 83       	std	Y+5, r22	; 0x05
    1704:	7e 83       	std	Y+6, r23	; 0x06
    1706:	8f 83       	std	Y+7, r24	; 0x07
    1708:	98 87       	std	Y+8, r25	; 0x08

	u32 Local_U32Reserved = 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	ab 83       	std	Y+3, r26	; 0x03
    1718:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_U32Number == 0)
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	af 81       	ldd	r26, Y+7	; 0x07
    1720:	b8 85       	ldd	r27, Y+8	; 0x08
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	a1 05       	cpc	r26, r1
    1726:	b1 05       	cpc	r27, r1
    1728:	81 f5       	brne	.+96     	; 0x178a <GLCD_voidSendNumber+0xa4>
	{
		GLCD_VoidSendData('0');
    172a:	80 e3       	ldi	r24, 0x30	; 48
    172c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GLCD_VoidSendData>
    1730:	60 c0       	rjmp	.+192    	; 0x17f2 <GLCD_voidSendNumber+0x10c>
	}
	/* reverse the number */
	while(Copy_U32Number != 0)
	{
		/* get the right most digit */
		Local_U32Reserved = Local_U32Reserved*10 + Copy_U32Number % 10 ;
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	ab 81       	ldd	r26, Y+3	; 0x03
    1738:	bc 81       	ldd	r27, Y+4	; 0x04
    173a:	2a e0       	ldi	r18, 0x0A	; 10
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__mulsi3>
    174a:	7b 01       	movw	r14, r22
    174c:	8c 01       	movw	r16, r24
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	af 81       	ldd	r26, Y+7	; 0x07
    1754:	b8 85       	ldd	r27, Y+8	; 0x08
    1756:	2a e0       	ldi	r18, 0x0A	; 10
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodsi4>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8e 0d       	add	r24, r14
    176c:	9f 1d       	adc	r25, r15
    176e:	a0 1f       	adc	r26, r16
    1770:	b1 1f       	adc	r27, r17
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	ab 83       	std	Y+3, r26	; 0x03
    1778:	bc 83       	std	Y+4, r27	; 0x04

		/* get rid of the right most digit */
		Copy_U32Number = 10;
    177a:	8a e0       	ldi	r24, 0x0A	; 10
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	af 83       	std	Y+7, r26	; 0x07
    1788:	b8 87       	std	Y+8, r27	; 0x08
	{
		GLCD_VoidSendData('0');
		return;
	}
	/* reverse the number */
	while(Copy_U32Number != 0)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	af 81       	ldd	r26, Y+7	; 0x07
    1790:	b8 85       	ldd	r27, Y+8	; 0x08
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	a1 05       	cpc	r26, r1
    1796:	b1 05       	cpc	r27, r1
    1798:	61 f6       	brne	.-104    	; 0x1732 <GLCD_voidSendNumber+0x4c>
		Copy_U32Number = 10;
	}
	do
	{
		/* display the right most digit with converting its value to ASCII */
		GLCD_VoidSendData((Local_U32Reserved%10)+'0');
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	ab 81       	ldd	r26, Y+3	; 0x03
    17a0:	bc 81       	ldd	r27, Y+4	; 0x04
    17a2:	2a e0       	ldi	r18, 0x0A	; 10
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodsi4>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	80 5d       	subi	r24, 0xD0	; 208
    17b8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GLCD_VoidSendData>
		/* get rid of the right most digit */
		Local_U32Reserved/=10;
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	ab 81       	ldd	r26, Y+3	; 0x03
    17c2:	bc 81       	ldd	r27, Y+4	; 0x04
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodsi4>
    17d4:	da 01       	movw	r26, r20
    17d6:	c9 01       	movw	r24, r18
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	ab 83       	std	Y+3, r26	; 0x03
    17de:	bc 83       	std	Y+4, r27	; 0x04

	}
	while (Local_U32Reserved != 1);
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	ab 81       	ldd	r26, Y+3	; 0x03
    17e6:	bc 81       	ldd	r27, Y+4	; 0x04
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	a1 05       	cpc	r26, r1
    17ee:	b1 05       	cpc	r27, r1
    17f0:	a1 f6       	brne	.-88     	; 0x179a <GLCD_voidSendNumber+0xb4>

}
    17f2:	28 96       	adiw	r28, 0x08	; 8
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	08 95       	ret

0000180c <GLCD_VoidClearAll>:
void GLCD_VoidClearAll(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <GLCD_VoidClearAll+0x6>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
	u8 i;     /* page number*/
	u8 j;     /*column number*/
	u8 Local_U8TotalPage = 8;
    1818:	88 e0       	ldi	r24, 0x08	; 8
    181a:	89 83       	std	Y+1, r24	; 0x01
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_HIGH);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	63 e0       	ldi	r22, 0x03	; 3
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 a9 07 	call	0xf52	; 0xf52 <DIO_U8SetPinValue>

	for(i=0; i<Local_U8TotalPage; i++)
    1830:	1b 82       	std	Y+3, r1	; 0x03
    1832:	1a c0       	rjmp	.+52     	; 0x1868 <GLCD_VoidClearAll+0x5c>
	{
		GLCD_U8PageSelection(i);
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		for(j=0; j<128 ; j++)
    183a:	1a 82       	std	Y+2, r1	; 0x02
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <GLCD_VoidClearAll+0x44>
		{
			GLCD_U8ColumnSelection(j);
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
			GLCD_VoidSendData(0);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GLCD_VoidSendData>
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);

	for(i=0; i<Local_U8TotalPage; i++)
	{
		GLCD_U8PageSelection(i);
		for(j=0; j<128 ; j++)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 23       	and	r24, r24
    1854:	a4 f7       	brge	.-24     	; 0x183e <GLCD_VoidClearAll+0x32>
		{
			GLCD_U8ColumnSelection(j);
			GLCD_VoidSendData(0);
		}
		GLCD_U8PageSelection(0);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(0);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
	u8 j;     /*column number*/
	u8 Local_U8TotalPage = 8;
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS1_PIN,DIO_U8_PIN_HIGH);
	DIO_U8SetPinValue(GLCD_U8_CNTRL_PORT,GLCD_U8_CS2_PIN,DIO_U8_PIN_HIGH);

	for(i=0; i<Local_U8TotalPage; i++)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	98 17       	cp	r25, r24
    186e:	10 f3       	brcs	.-60     	; 0x1834 <GLCD_VoidClearAll+0x28>
		}
		GLCD_U8PageSelection(0);
		GLCD_U8ColumnSelection(0);
	}

}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <GLCD_V_Line>:
u8 GLCD_V_Line(u8 Copy_U8StartPage, u8 Copy_U8EndPage, u8 Copy_U8Col)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <GLCD_V_Line+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GLCD_V_Line+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	8a 83       	std	Y+2, r24	; 0x02
    188a:	6b 83       	std	Y+3, r22	; 0x03
    188c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState = OK;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_U8Col<128) && (Copy_U8StartPage < 8) && (Copy_U8EndPage < 8))
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	88 23       	and	r24, r24
    1896:	a4 f0       	brlt	.+40     	; 0x18c0 <GLCD_V_Line+0x44>
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	88 f4       	brcc	.+34     	; 0x18c0 <GLCD_V_Line+0x44>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	70 f4       	brcc	.+28     	; 0x18c0 <GLCD_V_Line+0x44>
	{
		GLCD_U8PageSelection(Copy_U8StartPage);
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(Copy_U8Col);
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_U8SendString("........");
    18b0:	80 e6       	ldi	r24, 0x60	; 96
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GLCD_U8SendString>
		GLCD_U8PageSelection(Copy_U8EndPage);
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GLCD_V_Line+0x48>

	}
	else
	{
		Local_U8ErrorState= NOK;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_U8ErrorState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <GLCD_H_Line>:
u8 GLCD_H_Line(u8 Copy_U8StartCol, u8 Copy_U8EndCol, u8 Copy_U8Page)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <GLCD_H_Line+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <GLCD_H_Line+0x8>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	6b 83       	std	Y+3, r22	; 0x03
    18e4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState = OK;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_U8StartCol<128) && (Copy_U8EndCol<128) && (Copy_U8Page <8))
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	88 23       	and	r24, r24
    18ee:	a4 f0       	brlt	.+40     	; 0x1918 <GLCD_H_Line+0x44>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 23       	and	r24, r24
    18f4:	8c f0       	brlt	.+34     	; 0x1918 <GLCD_H_Line+0x44>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	88 30       	cpi	r24, 0x08	; 8
    18fa:	70 f4       	brcc	.+28     	; 0x1918 <GLCD_H_Line+0x44>
	{
		GLCD_U8PageSelection(Copy_U8Page);
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(Copy_U8StartCol);
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
        GLCD_U8SendString("........");
    1908:	80 e6       	ldi	r24, 0x60	; 96
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GLCD_U8SendString>
		GLCD_U8ColumnSelection(Copy_U8EndCol);
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GLCD_H_Line+0x48>

	}

	else
	{
		Local_U8ErrorState= NOK;
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_U8ErrorState;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
}
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <PORT_voidInit>:
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_interface.h"
#include"PORT_reg.h"

void PORT_voidInit(void){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
  
  DDRA= PORTA_DIR;
    1934:	ea e3       	ldi	r30, 0x3A	; 58
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1
  DDRB= PORTB_DIR;
    193a:	e7 e3       	ldi	r30, 0x37	; 55
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	8f e3       	ldi	r24, 0x3F	; 63
    1940:	80 83       	st	Z, r24
  DDRC= PORTC_DIR;
    1942:	e4 e3       	ldi	r30, 0x34	; 52
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	80 83       	st	Z, r24
  DDRD= PORTD_DIR;
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	10 82       	st	Z, r1

  PORTA = PORTA_INITIAL_VAL;
    1950:	eb e3       	ldi	r30, 0x3B	; 59
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	10 82       	st	Z, r1
  PORTB = PORTB_INITIAL_VAL;
    1956:	e8 e3       	ldi	r30, 0x38	; 56
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	10 82       	st	Z, r1
  PORTC = PORTC_INITIAL_VAL;
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	10 82       	st	Z, r1
  PORTD = PORTD_INITIAL_VAL;
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	10 82       	st	Z, r1
	
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <TIMER0_voidInit>:
#include"TIMER_reg.h"

static void (*TIMER0_pvOVFCallBackFunc)(void)= NULL;
static void (*TIMER0_pvCTCCallBackFunc)(void)= NULL;

void TIMER0_voidInit(void){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62

	/* set CTC mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1976:	a3 e5       	ldi	r26, 0x53	; 83
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e3 e5       	ldi	r30, 0x53	; 83
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7b       	andi	r24, 0xBF	; 191
    1982:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1984:	a3 e5       	ldi	r26, 0x53	; 83
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e3 e5       	ldi	r30, 0x53	; 83
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	8c 93       	st	X, r24

	/* Set prescaler : division by 64 */
	TCCR0 &= 0b11111000;
    1992:	a3 e5       	ldi	r26, 0x53	; 83
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e3 e5       	ldi	r30, 0x53	; 83
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 7f       	andi	r24, 0xF8	; 248
    199e:	8c 93       	st	X, r24
	TCCR0 |= 3;
    19a0:	a3 e5       	ldi	r26, 0x53	; 83
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e3 e5       	ldi	r30, 0x53	; 83
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	83 60       	ori	r24, 0x03	; 3
    19ac:	8c 93       	st	X, r24

	/* set compare value =250 */
	OCR0=250;
    19ae:	ec e5       	ldi	r30, 0x5C	; 92
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a ef       	ldi	r24, 0xFA	; 250
    19b4:	80 83       	st	Z, r24

	/* compare match interrupt enable */
	SET_BIT(TIMSK,TIMSK_OCIE0);
    19b6:	a9 e5       	ldi	r26, 0x59	; 89
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8c 93       	st	X, r24

}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <TIMER0_U8SetCallBack>:

u8 TIMER0_U8SetCallBack(u8 Copy_U8IntType, void(*Copy_pvCallBackFunc)(void)){
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <TIMER0_U8SetCallBack+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <TIMER0_U8SetCallBack+0x8>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	7c 83       	std	Y+4, r23	; 0x04
    19da:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_U8ErrorState = OK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFunc != NULL ){
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	b9 f0       	breq	.+46     	; 0x1a16 <TIMER0_U8SetCallBack+0x4c>

		if(Copy_U8IntType == TIMER_U8_OVF_INT )
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 23       	and	r24, r24
    19ec:	39 f4       	brne	.+14     	; 0x19fc <TIMER0_U8SetCallBack+0x32>
		{
			TIMER0_pvOVFCallBackFunc = Copy_pvCallBackFunc;
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	90 93 b2 00 	sts	0x00B2, r25
    19f6:	80 93 b1 00 	sts	0x00B1, r24
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <TIMER0_U8SetCallBack+0x50>
		}
		else if(Copy_U8IntType == TIMER_U8_CTC_INT)
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <TIMER0_U8SetCallBack+0x46>
		{
			TIMER0_pvCTCCallBackFunc = Copy_pvCallBackFunc;
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	90 93 b4 00 	sts	0x00B4, r25
    1a0a:	80 93 b3 00 	sts	0x00B3, r24
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <TIMER0_U8SetCallBack+0x50>
		}
		else
		{
			Local_U8ErrorState = NOK;
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <TIMER0_U8SetCallBack+0x50>
		}
	}

	else
	{
		Local_U8ErrorState = NULL_PONTER;
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_U8ErrorState;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <__vector_10>:

    /* Timer0 CTC ISR*/

void __vector_10 (void)  __attribute__((signal));
void __vector_10 (void){
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_pvCTCCallBackFunc != NULL)
    1a54:	80 91 b3 00 	lds	r24, 0x00B3
    1a58:	90 91 b4 00 	lds	r25, 0x00B4
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <__vector_10+0x40>
	{
		TIMER0_pvCTCCallBackFunc();
    1a60:	e0 91 b3 00 	lds	r30, 0x00B3
    1a64:	f0 91 b4 00 	lds	r31, 0x00B4
    1a68:	09 95       	icall
	else
	{
		/* do nothing */
	}

}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	bf 91       	pop	r27
    1a74:	af 91       	pop	r26
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	7f 91       	pop	r23
    1a7c:	6f 91       	pop	r22
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <UART_VoidInit>:
#include"UART_reg.h"
#include"UART_config.h"


void UART_VoidInit(void)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62

	u8 Local_U8UCSRCVal=0;
    1a9a:	19 82       	std	Y+1, r1	; 0x01

	/* set bit 7 for UCSRC register select  */
	SET_BIT(Local_U8UCSRCVal,UCSRC_URSEL);
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	80 68       	ori	r24, 0x80	; 128
    1aa0:	89 83       	std	Y+1, r24	; 0x01

	/* 8 data bits character size */
	SET_BIT(Local_U8UCSRCVal,UCSRC_UCSZ0);
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_U8UCSRCVal,UCSRC_UCSZ1);
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	84 60       	ori	r24, 0x04	; 4
    1aac:	89 83       	std	Y+1, r24	; 0x01

	/* send the value to the register*/
	UCSRC= Local_U8UCSRCVal;
    1aae:	e0 e4       	ldi	r30, 0x40	; 64
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	80 83       	st	Z, r24

	/* 9600 bps on system freq 16MHZ*/
	UBRRL= 103;
    1ab6:	e9 e2       	ldi	r30, 0x29	; 41
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	87 e6       	ldi	r24, 0x67	; 103
    1abc:	80 83       	st	Z, r24

	    /* Receiver Enable */
	SET_BIT(UCSRB,UCSRB_RXEN);
    1abe:	aa e2       	ldi	r26, 0x2A	; 42
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ea e2       	ldi	r30, 0x2A	; 42
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 61       	ori	r24, 0x10	; 16
    1aca:	8c 93       	st	X, r24
	
	   /* Transmitter Enable */
	SET_BIT(UCSRB,UCSRB_TXEN);
    1acc:	aa e2       	ldi	r26, 0x2A	; 42
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ea e2       	ldi	r30, 0x2A	; 42
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	8c 93       	st	X, r24

}
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <UART_VoidSendChar>:
void UART_VoidSendChar(u8 Copy_U8Char)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	89 83       	std	Y+1, r24	; 0x01
	
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
    1aee:	eb e2       	ldi	r30, 0x2B	; 43
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	82 95       	swap	r24
    1af6:	86 95       	lsr	r24
    1af8:	87 70       	andi	r24, 0x07	; 7
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	a1 f3       	breq	.-24     	; 0x1aee <UART_VoidSendChar+0xc>
	UDR= Copy_U8Char;
    1b06:	ec e2       	ldi	r30, 0x2C	; 44
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	80 83       	st	Z, r24

}
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <UART_U8ReceiveChar>:
u8 UART_U8ReceiveChar(void)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
    1b1e:	eb e2       	ldi	r30, 0x2B	; 43
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 23       	and	r24, r24
    1b26:	dc f7       	brge	.-10     	; 0x1b1e <UART_U8ReceiveChar+0x8>
	return UDR;
    1b28:	ec e2       	ldi	r30, 0x2C	; 44
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
	
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <main>:
#include"UART_interface.h"
#include"GLCD_interface.h"

void SW_PWM(void);

void main(void){
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	eb 97       	sbiw	r28, 0x3b	; 59
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61

	u16 Local_U16AnalogmV;
	u8 Local_U8ADCReading;
	f32 Local_F32DutyCycle = .977 ;
    1b48:	8c ea       	ldi	r24, 0xAC	; 172
    1b4a:	9c e1       	ldi	r25, 0x1C	; 28
    1b4c:	aa e7       	ldi	r26, 0x7A	; 122
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	89 ab       	std	Y+49, r24	; 0x31
    1b52:	9a ab       	std	Y+50, r25	; 0x32
    1b54:	ab ab       	std	Y+51, r26	; 0x33
    1b56:	bc ab       	std	Y+52, r27	; 0x34
	u8 Local_U8TickTime = 4;
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	88 ab       	std	Y+48, r24	; 0x30
	f32 Local_F32Frequency = .25 ;           // (1/Local_U8TickTime);
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e8       	ldi	r26, 0x80	; 128
    1b62:	be e3       	ldi	r27, 0x3E	; 62
    1b64:	8c a7       	std	Y+44, r24	; 0x2c
    1b66:	9d a7       	std	Y+45, r25	; 0x2d
    1b68:	ae a7       	std	Y+46, r26	; 0x2e
    1b6a:	bf a7       	std	Y+47, r27	; 0x2f
	u8 Local_U8ReceivedChar;
	Local_U8ReceivedChar=UART_U8ReceiveChar();
    1b6c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <UART_U8ReceiveChar>
    1b70:	8b a7       	std	Y+43, r24	; 0x2b

	PORT_voidInit();
    1b72:	0e 94 96 0c 	call	0x192c	; 0x192c <PORT_voidInit>
	ADC_voidInit();
    1b76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	TIMER0_voidInit();
    1b7a:	0e 94 b7 0c 	call	0x196e	; 0x196e <TIMER0_voidInit>
	GLCD_voidInit();
    1b7e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <GLCD_voidInit>
	GLCD_VoidClearAll();
    1b82:	0e 94 06 0c 	call	0x180c	; 0x180c <GLCD_VoidClearAll>

	TIMER0_U8SetCallBack(TIMER_U8_CTC_INT,&SW_PWM);
    1b86:	2f ea       	ldi	r18, 0xAF	; 175
    1b88:	3f e0       	ldi	r19, 0x0F	; 15
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <TIMER0_U8SetCallBack>

	GIE_voidEnableGlobal();
    1b92:	0e 94 8b 09 	call	0x1316	; 0x1316 <GIE_voidEnableGlobal>


	while(1)
	{

		if(Local_U8ADCReading | Local_U8ReceivedChar ==1)
    1b96:	8f a9       	ldd	r24, Y+55	; 0x37
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3b af       	std	Y+59, r19	; 0x3b
    1b9e:	2a af       	std	Y+58, r18	; 0x3a
    1ba0:	19 ae       	std	Y+57, r1	; 0x39
    1ba2:	18 ae       	std	Y+56, r1	; 0x38
    1ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <main+0x7e>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	99 af       	std	Y+57, r25	; 0x39
    1bb0:	88 af       	std	Y+56, r24	; 0x38
    1bb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bb4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bb6:	28 ad       	ldd	r18, Y+56	; 0x38
    1bb8:	39 ad       	ldd	r19, Y+57	; 0x39
    1bba:	82 2b       	or	r24, r18
    1bbc:	93 2b       	or	r25, r19
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	51 f3       	breq	.-44     	; 0x1b96 <main+0x62>
		{
		ADC_U8StartConversionSynch(0, &Local_U8ADCReading);
    1bc2:	9e 01       	movw	r18, r28
    1bc4:	29 5c       	subi	r18, 0xC9	; 201
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	b9 01       	movw	r22, r18
    1bcc:	0e 94 87 06 	call	0xd0e	; 0xd0e <ADC_U8StartConversionSynch>
		Local_U16AnalogmV = (u16)(((u32)Local_U8ADCReading * 5000UL) / 256);
    1bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	28 e8       	ldi	r18, 0x88	; 136
    1bdc:	33 e1       	ldi	r19, 0x13	; 19
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__mulsi3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	89 2f       	mov	r24, r25
    1bf0:	9a 2f       	mov	r25, r26
    1bf2:	ab 2f       	mov	r26, r27
    1bf4:	bb 27       	eor	r27, r27
    1bf6:	9e ab       	std	Y+54, r25	; 0x36
    1bf8:	8d ab       	std	Y+53, r24	; 0x35

		GLCD_U8PageSelection(1);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(1);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_U8SendString("Frequency (in KHZ) is");
    1c06:	89 e6       	ldi	r24, 0x69	; 105
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GLCD_U8SendString>
		GLCD_U8PageSelection(1);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(10);
    1c14:	8a e0       	ldi	r24, 0x0A	; 10
    1c16:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_voidSendNumber(Local_F32Frequency/1000);
    1c1a:	6c a5       	ldd	r22, Y+44	; 0x2c
    1c1c:	7d a5       	ldd	r23, Y+45	; 0x2d
    1c1e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c20:	9f a5       	ldd	r25, Y+47	; 0x2f
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GLCD_voidSendNumber>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c4c:	b2 e4       	ldi	r27, 0x42	; 66
    1c4e:	8f a3       	std	Y+39, r24	; 0x27
    1c50:	98 a7       	std	Y+40, r25	; 0x28
    1c52:	a9 a7       	std	Y+41, r26	; 0x29
    1c54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c56:	6f a1       	ldd	r22, Y+39	; 0x27
    1c58:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	4a e7       	ldi	r20, 0x7A	; 122
    1c64:	55 e4       	ldi	r21, 0x45	; 69
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8b a3       	std	Y+35, r24	; 0x23
    1c70:	9c a3       	std	Y+36, r25	; 0x24
    1c72:	ad a3       	std	Y+37, r26	; 0x25
    1c74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c76:	6b a1       	ldd	r22, Y+35	; 0x23
    1c78:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <main+0x164>
		__ticks = 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9a a3       	std	Y+34, r25	; 0x22
    1c94:	89 a3       	std	Y+33, r24	; 0x21
    1c96:	3f c0       	rjmp	.+126    	; 0x1d16 <main+0x1e2>
	else if (__tmp > 65535)
    1c98:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	4c f5       	brge	.+82     	; 0x1d02 <main+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9a a3       	std	Y+34, r25	; 0x22
    1cd6:	89 a3       	std	Y+33, r24	; 0x21
    1cd8:	0f c0       	rjmp	.+30     	; 0x1cf8 <main+0x1c4>
    1cda:	80 e9       	ldi	r24, 0x90	; 144
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	98 a3       	std	Y+32, r25	; 0x20
    1ce0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ce4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <main+0x1b2>
    1cea:	98 a3       	std	Y+32, r25	; 0x20
    1cec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cee:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	69 f7       	brne	.-38     	; 0x1cda <main+0x1a6>
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <main+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d02:	6b a1       	ldd	r22, Y+35	; 0x23
    1d04:	7c a1       	ldd	r23, Y+36	; 0x24
    1d06:	8d a1       	ldd	r24, Y+37	; 0x25
    1d08:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9a a3       	std	Y+34, r25	; 0x22
    1d14:	89 a3       	std	Y+33, r24	; 0x21
    1d16:	89 a1       	ldd	r24, Y+33	; 0x21
    1d18:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <main+0x1ee>
    1d26:	9e 8f       	std	Y+30, r25	; 0x1e
    1d28:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);


		GLCD_U8PageSelection(1);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(64);
    1d30:	80 e4       	ldi	r24, 0x40	; 64
    1d32:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_U8SendString("Duty Cycle is");
    1d36:	8f e7       	ldi	r24, 0x7F	; 127
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GLCD_U8SendString>
		GLCD_U8PageSelection(1);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(70);
    1d44:	86 e4       	ldi	r24, 0x46	; 70
    1d46:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_voidSendNumber(Local_F32DutyCycle);
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GLCD_voidSendNumber>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a8 ec       	ldi	r26, 0xC8	; 200
    1d68:	b2 e4       	ldi	r27, 0x42	; 66
    1d6a:	89 8f       	std	Y+25, r24	; 0x19
    1d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	69 8d       	ldd	r22, Y+25	; 0x19
    1d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	55 e4       	ldi	r21, 0x45	; 69
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8d 8b       	std	Y+21, r24	; 0x15
    1d8c:	9e 8b       	std	Y+22, r25	; 0x16
    1d8e:	af 8b       	std	Y+23, r26	; 0x17
    1d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <main+0x280>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <main+0x2fe>
	else if (__tmp > 65535)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <main+0x2e0>
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	9a 89       	ldd	r25, Y+18	; 0x12
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <main+0x2ce>
    1e06:	9a 8b       	std	Y+18, r25	; 0x12
    1e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <main+0x2c2>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e20:	7e 89       	ldd	r23, Y+22	; 0x16
    1e22:	8f 89       	ldd	r24, Y+23	; 0x17
    1e24:	98 8d       	ldd	r25, Y+24	; 0x18
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	98 89       	ldd	r25, Y+16	; 0x10
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <main+0x30a>
    1e42:	98 8b       	std	Y+16, r25	; 0x10
    1e44:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		GLCD_U8PageSelection(2);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(1);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_U8SendString("Cycle Time (in us) is");
    1e52:	8d e8       	ldi	r24, 0x8D	; 141
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GLCD_U8SendString>
		GLCD_U8PageSelection(2);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <GLCD_U8PageSelection>
		GLCD_U8ColumnSelection(10);
    1e60:	8a e0       	ldi	r24, 0x0A	; 10
    1e62:	0e 94 35 0b 	call	0x166a	; 0x166a <GLCD_U8ColumnSelection>
		GLCD_voidSendNumber(Local_U8TickTime);
    1e66:	88 a9       	ldd	r24, Y+48	; 0x30
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e0       	ldi	r26, 0x00	; 0
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GLCD_voidSendNumber>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a8 ec       	ldi	r26, 0xC8	; 200
    1e7e:	b2 e4       	ldi	r27, 0x42	; 66
    1e80:	8b 87       	std	Y+11, r24	; 0x0b
    1e82:	9c 87       	std	Y+12, r25	; 0x0c
    1e84:	ad 87       	std	Y+13, r26	; 0x0d
    1e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	55 e4       	ldi	r21, 0x45	; 69
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8f 83       	std	Y+7, r24	; 0x07
    1ea2:	98 87       	std	Y+8, r25	; 0x08
    1ea4:	a9 87       	std	Y+9, r26	; 0x09
    1ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <main+0x396>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <main+0x414>
	else if (__tmp > 65535)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <main+0x3f6>
    1f0c:	80 e9       	ldi	r24, 0x90	; 144
    1f0e:	91 e0       	ldi	r25, 0x01	; 1
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <main+0x3e4>
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <main+0x3d8>
    1f32:	31 ce       	rjmp	.-926    	; 0x1b96 <main+0x62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <main+0x420>
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	1c ce       	rjmp	.-968    	; 0x1b96 <main+0x62>

00001f5e <SW_PWM>:

	}
	}
}
void SW_PWM(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_U8Counter= 0;

	Local_U8Counter++;
    1f66:	80 91 b5 00 	lds	r24, 0x00B5
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	80 93 b5 00 	sts	0x00B5, r24
		GLCD_H_Line(11,20,5);
		GLCD_V_Line(5,7,20);

		Local_U8Counter = 0;
	}
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <__mulsi3>:
    1f76:	62 9f       	mul	r22, r18
    1f78:	d0 01       	movw	r26, r0
    1f7a:	73 9f       	mul	r23, r19
    1f7c:	f0 01       	movw	r30, r0
    1f7e:	82 9f       	mul	r24, r18
    1f80:	e0 0d       	add	r30, r0
    1f82:	f1 1d       	adc	r31, r1
    1f84:	64 9f       	mul	r22, r20
    1f86:	e0 0d       	add	r30, r0
    1f88:	f1 1d       	adc	r31, r1
    1f8a:	92 9f       	mul	r25, r18
    1f8c:	f0 0d       	add	r31, r0
    1f8e:	83 9f       	mul	r24, r19
    1f90:	f0 0d       	add	r31, r0
    1f92:	74 9f       	mul	r23, r20
    1f94:	f0 0d       	add	r31, r0
    1f96:	65 9f       	mul	r22, r21
    1f98:	f0 0d       	add	r31, r0
    1f9a:	99 27       	eor	r25, r25
    1f9c:	72 9f       	mul	r23, r18
    1f9e:	b0 0d       	add	r27, r0
    1fa0:	e1 1d       	adc	r30, r1
    1fa2:	f9 1f       	adc	r31, r25
    1fa4:	63 9f       	mul	r22, r19
    1fa6:	b0 0d       	add	r27, r0
    1fa8:	e1 1d       	adc	r30, r1
    1faa:	f9 1f       	adc	r31, r25
    1fac:	bd 01       	movw	r22, r26
    1fae:	cf 01       	movw	r24, r30
    1fb0:	11 24       	eor	r1, r1
    1fb2:	08 95       	ret

00001fb4 <__udivmodsi4>:
    1fb4:	a1 e2       	ldi	r26, 0x21	; 33
    1fb6:	1a 2e       	mov	r1, r26
    1fb8:	aa 1b       	sub	r26, r26
    1fba:	bb 1b       	sub	r27, r27
    1fbc:	fd 01       	movw	r30, r26
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <__udivmodsi4_ep>

00001fc0 <__udivmodsi4_loop>:
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	ee 1f       	adc	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	a2 17       	cp	r26, r18
    1fca:	b3 07       	cpc	r27, r19
    1fcc:	e4 07       	cpc	r30, r20
    1fce:	f5 07       	cpc	r31, r21
    1fd0:	20 f0       	brcs	.+8      	; 0x1fda <__udivmodsi4_ep>
    1fd2:	a2 1b       	sub	r26, r18
    1fd4:	b3 0b       	sbc	r27, r19
    1fd6:	e4 0b       	sbc	r30, r20
    1fd8:	f5 0b       	sbc	r31, r21

00001fda <__udivmodsi4_ep>:
    1fda:	66 1f       	adc	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	1a 94       	dec	r1
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <__udivmodsi4_loop>
    1fe6:	60 95       	com	r22
    1fe8:	70 95       	com	r23
    1fea:	80 95       	com	r24
    1fec:	90 95       	com	r25
    1fee:	9b 01       	movw	r18, r22
    1ff0:	ac 01       	movw	r20, r24
    1ff2:	bd 01       	movw	r22, r26
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	08 95       	ret

00001ff8 <__prologue_saves__>:
    1ff8:	2f 92       	push	r2
    1ffa:	3f 92       	push	r3
    1ffc:	4f 92       	push	r4
    1ffe:	5f 92       	push	r5
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ca 1b       	sub	r28, r26
    2022:	db 0b       	sbc	r29, r27
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	09 94       	ijmp

00002030 <__epilogue_restores__>:
    2030:	2a 88       	ldd	r2, Y+18	; 0x12
    2032:	39 88       	ldd	r3, Y+17	; 0x11
    2034:	48 88       	ldd	r4, Y+16	; 0x10
    2036:	5f 84       	ldd	r5, Y+15	; 0x0f
    2038:	6e 84       	ldd	r6, Y+14	; 0x0e
    203a:	7d 84       	ldd	r7, Y+13	; 0x0d
    203c:	8c 84       	ldd	r8, Y+12	; 0x0c
    203e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2040:	aa 84       	ldd	r10, Y+10	; 0x0a
    2042:	b9 84       	ldd	r11, Y+9	; 0x09
    2044:	c8 84       	ldd	r12, Y+8	; 0x08
    2046:	df 80       	ldd	r13, Y+7	; 0x07
    2048:	ee 80       	ldd	r14, Y+6	; 0x06
    204a:	fd 80       	ldd	r15, Y+5	; 0x05
    204c:	0c 81       	ldd	r16, Y+4	; 0x04
    204e:	1b 81       	ldd	r17, Y+3	; 0x03
    2050:	aa 81       	ldd	r26, Y+2	; 0x02
    2052:	b9 81       	ldd	r27, Y+1	; 0x01
    2054:	ce 0f       	add	r28, r30
    2056:	d1 1d       	adc	r29, r1
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	ed 01       	movw	r28, r26
    2064:	08 95       	ret

00002066 <_exit>:
    2066:	f8 94       	cli

00002068 <__stop_program>:
    2068:	ff cf       	rjmp	.-2      	; 0x2068 <__stop_program>
